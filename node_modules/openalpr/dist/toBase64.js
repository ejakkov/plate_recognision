(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('debug')) :
    typeof define === 'function' && define.amd ? define(['debug'], factory) :
    (global = global || self, global.toBase64 = factory(global.debug));
}(this, (function (Debug) { 'use strict';

    Debug = Debug && Object.prototype.hasOwnProperty.call(Debug, 'default') ? Debug['default'] : Debug;

    const debug = Debug('openalpr:toBase64');

    function toBase64(file) { return new Promise(((resolve, reject) => {
        debug('Creating a new file reader...');
        const reader = new FileReader();

        debug('Reading file as data URL...');
        reader.readAsDataURL(file);

        debug('Setting an onload event listener...');
        reader.onload = () => resolve(reader.result);

        debug('Setting an onerror event listener...');
        reader.onerror = error => reject(error);
    })) }

    return toBase64;

})));
